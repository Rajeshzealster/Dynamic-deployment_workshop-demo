---
- hosts: all
  gather_facts: false
  tasks:

    # - name: Check if the directory exists
    #   stat:
    #     path: /tmp/configurations
    #   register: dir_stat

    # - name: Create the directory if it doesn't exist
    #   file:
    #     path: /tmp/configurations
    #     state: directory
    #   when: not dir_stat.stat.exists

    - name: Make the location for deployments
      file:
        path: /tmp/configurations
        recurse: true
        state: directory
        force: no
      

    # - name: Download the deployment file from url
    #   get_url:
    #     url: "{{ depl_url }}"
    #     dest: "/tmp/configurations/{{ depl_name }}.yaml"

    # - name: Download the deployment file from URL using curl
    #   shell: "curl -o '/tmp/configurations/{{ depl_name }}.yaml' --insecure '{{ depl_url }}'"

    # - name: Apply kubernetes deployment file
    #   kubectl:
    #     cmd: apply
    #     src: /tmp/deployments/"{{name}}".yaml
    #     force: yes

    - name: Download the deployment file from URL using curl
      shell: "curl -o '/tmp/configurations/{{ depl_name }}.yaml' --insecure '{{ depl_url }}'"
      register: curl_result
      until: curl_result.rc == 0
      retries: 10
      delay: 3

      
    - name: Create custom k3s namespace
      shell: "kubectl create namespace '{{k3s_name_space}}'"
      ignore_errors: yes

    - name: create the deployment using kubectl
      shell: "kubectl create -f '/tmp/configurations/{{ depl_name }}.yaml' -n '{{k3s_name_space}}'"
      ignore_errors: yes
    

    - name: Wait till the deployment is created
      shell: "kubectl wait deployment -n '{{k3s_name_space}}' '{{depl_name}}' --for condition=Available=True --timeout=180s"
      #kubectl rollout status "deployment/{{depl_name }}.yaml"
      
